int[][] sudokuBoard = new int[9][9];
int[][] solutionBoard = new int[9][9];
boolean[][] fixedCells = new boolean[9][9];
int[][] grid = new int[9][9];
int cellSize = 50;
int selectedRow = -1;
int selectedCol = -1;

void setup() {
  size(450, 450);
  generateSudoku();
}

void draw() {
  background(255);
  drawGrid();
  drawNumbers();
  highlightSelectedCell();
}

void generateSudoku() {
  int[][] fullSolution = generateSolvedSudoku();
  
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      solutionBoard[i][j] = fullSolution[i][j];
    }
  }
  
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      if (random(1) < 0.5) {
        sudokuBoard[i][j] = fullSolution[i][j];
        fixedCells[i][j] = true;
      } else {
        sudokuBoard[i][j] = 0;
        fixedCells[i][j] = false;
      }
    }
  }
}

int[][] generateSolvedSudoku() {
  fillGrid(grid);
  return grid;
}

boolean fillGrid(int[][] grid) {
  for (int row = 0; row < 9; row++) {
    for (int col = 0; col < 9; col++) {
      if (grid[row][col] == 0) {
        int[] numbers = generateRandomNumbers();
        for (int i = 0; i < 9; i++) {
          int num = numbers[i];
          if (isValid(grid, row, col, num)) {
            grid[row][col] = num;
            if (fillGrid(grid)) {
              return true;
            }
            grid[row][col] = 0;
          }
        }
        return false;
      }
    }
  }
  return true;
}

int[] generateRandomNumbers() {
  int[] numbers = new int[9];
  for (int i = 0; i < 9; i++) {
    numbers[i] = i + 1;
  }
  shuffleArray(numbers);
  return numbers;
}

void shuffleArray(int[] array) {
  for (int i = array.length - 1; i > 0; i--) {
    int index = int(random(i + 1));
    
    int temp = array[i];
    array[i] = array[index];
    array[index] = temp;
  }
}

boolean isValid(int[][] grid, int row, int col, int num) {
  for (int c = 0; c < 9; c++) {
    if (grid[row][c] == num) {
      return false;
    }
  }
  
  for (int r = 0; r < 9; r++) {
    if (grid[r][col] == num) {
      return false;
    }
  }
  
  int subGridRow = (row / 3) * 3;
  int subGridCol = (col / 3) * 3;
  for (int r = subGridRow; r < subGridRow + 3; r++) {
    for (int c = subGridCol; c < subGridCol + 3; c++) {
      if (grid[r][c] == num) {
        return false;
      }
    }
  }
  
  return true;
}

void drawGrid() {
  stroke(0);
  for (int i = 0; i <= 9; i++) {
    if (i % 3 == 0) {
      strokeWeight(4);
    } else {
      strokeWeight(1);
    }
    line(i * cellSize, 0, i * cellSize, 9 * cellSize);
    line(0, i * cellSize, 9 * cellSize, i * cellSize);
  }
}

void drawNumbers() {
  textAlign(CENTER, CENTER);
  textSize(32);
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      if (sudokuBoard[i][j] != 0) {
        if (fixedCells[i][j]) {
          fill(0);
        } else {
          if (sudokuBoard[i][j] == solutionBoard[i][j]) {
            fill(0, 255, 0);
          } else {
            fill(255, 0, 0); 
          }
        }
        text(sudokuBoard[i][j], j * cellSize + cellSize / 2, i * cellSize + cellSize / 2);
      }
    }
  }
}

void highlightSelectedCell() {
  if (selectedRow != -1 && selectedCol != -1) {
    noFill();
    stroke(255, 0, 0);
    strokeWeight(3);
    rect(selectedCol * cellSize, selectedRow * cellSize, cellSize, cellSize);
  }
}

void mousePressed() {
  int col = mouseX / cellSize;
  int row = mouseY / cellSize;
  if (col < 9 && row < 9) {
    selectedCol = col;
    selectedRow = row;
  }
}

void keyPressed() {
  if (selectedRow != -1 && selectedCol != -1 && key >= '1' && key <= '9') {
    if (!fixedCells[selectedRow][selectedCol]) {
      int enteredNumber = key - '0';
      sudokuBoard[selectedRow][selectedCol] = enteredNumber;
    }
  }
}