int[][] sudokuBoard = new int[9][9];
int cellSize = 50;
int selectedRow = -1;
int selectedCol = -1;

void setup() {
  size(450, 450);
  generateSudoku();
}

void draw() {
  background(255);
  drawGrid();
  drawNumbers();
  highlightSelectedCell();
}

void generateSudoku() {
  sudokuBoard = new int[][] {
    {5, 3, 0, 0, 7, 0, 0, 0, 0},
    {6, 0, 0, 1, 9, 5, 0, 0, 0},
    {0, 9, 8, 0, 0, 0, 0, 6, 0},
    {8, 0, 0, 0, 6, 0, 0, 0, 3},
    {4, 0, 0, 8, 0, 3, 0, 0, 1},
    {7, 0, 0, 0, 2, 0, 0, 0, 6},
    {0, 6, 0, 0, 0, 0, 2, 8, 0},
    {0, 0, 0, 4, 1, 9, 0, 0, 5},
    {0, 0, 0, 0, 8, 0, 0, 7, 9}
  };
}

void drawGrid() {
  stroke(0);
  for (int i = 0; i <= 9; i++) {
    if (i % 3 == 0) {
      strokeWeight(4);
    } else {
      strokeWeight(1);
    }
    line(i * cellSize, 0, i * cellSize, 9 * cellSize);
    line(0, i * cellSize, 9 * cellSize, i * cellSize);
  }
}

void drawNumbers() {
  textAlign(CENTER, CENTER);
  textSize(32);
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      if (sudokuBoard[i][j] != 0) { 
        fill(0);
        text(sudokuBoard[i][j], j * cellSize + cellSize / 2, i * cellSize + cellSize / 2);
      }
    }
  }
}

void highlightSelectedCell() {
  if (selectedRow != -1 && selectedCol != -1) {
    noFill();
    stroke(255, 0, 0);
    strokeWeight(3);
    rect(selectedCol * cellSize, selectedRow * cellSize, cellSize, cellSize);
  }
}

void mousePressed() {
  int col = mouseX / cellSize;
  int row = mouseY / cellSize;
  if (col < 9 && row < 9) {
    selectedCol = col;
    selectedRow = row;
  }
}

void keyPressed() {
  if (selectedRow != -1 && selectedCol != -1 && key >= '1' && key <= '9') {
    int enteredNumber = key - '0';
    sudokuBoard[selectedRow][selectedCol] = enteredNumber;
  }
}